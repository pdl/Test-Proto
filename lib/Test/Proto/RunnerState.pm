package Test::Proto::RunnerState;
use 5.006;
use strict;
use warnings;

sub new
{
	my ($class, $testRunner, $args) = @_;
	return undef unless ((ref $testRunner) and $testRunner->isa('Test::Proto::TestRunner'));
	$args = {} unless (defined $args) and ((ref $args) eq ref {});
	bless {
		runner=>$testRunner,
		location=>$testRunner->current_location,
		data=>$args
	}, $class;
	# Use Weaken on runner parent?
}

sub runner {
	my ($self, $newRunner) = @_;
	$self->{runner} = $newRunner if (defined $newRunner);
	return $self->{runner};
}

sub location {
	my ($self) = @_;
	return $self->{location};
}

sub data {
	my ($self, $newData) = @_;
	if (defined $newData and ref $newData eq ref {}) {
		$self->{data}->{$_} = $newData->{$_} foreach keys $newData;
	}
	return $self->{'data'};
}

1;

=pod

=head1 NAME

Test::Proto::RunnerState - Stores the state of a TestRunner

=head1 SYNOPSIS

	my $runnerState = $testRunner->current_state();
	my $data = $runnerState->data();

The RunnerState is generated by the L<Test::Proto::TestRunner> class each time it steps into a test level (i.e. usually a new prototype). The RunnerState is used by Formatters to provide information about what is being tested. 

This minimal formatter does precisely nothing.

=head1 METHODS

=head3 runner

=head3 data

=head3 location

=head1 OTHER INFORMATION

For author, version, bug reports, support, etc, please see L<Test::Proto>. 

=cut


